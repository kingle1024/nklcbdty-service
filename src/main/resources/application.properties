spring.profiles.active=prod
spring.application.name=nklcbdty
spring.mvc.servlet.load-on-startup=1
# JPA
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect
spring.jpa.show-sql=true
logging.level.org.hibernate.SQL=INFO
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=INFO
spring.datasource.url=${DATASOURCE_URL}
spring.datasource.username=${DATASOURCE_USERNAME}
spring.datasource.password=${DATASOURCE_PASSWORD}
ip2location.api.key=${IP2LOCATION_API_KEY}

# KAKAO
spring.security.oauth2.client.registration.kakao.client-id=${KAKAO_CLIENT_ID}
spring.security.oauth2.client.registration.kakao.client-secret=${KAKAO_CLIENT_SECRET}
spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:8100/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,profile_image,account_email
spring.security.oauth2.client.registration.kakao.client-name=Kakao
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=kingle1024@gmail.com
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

spring.redis.host=${REDIS_HOST}
spring.redis.port=${REDIS_PORT}
spring.redis.password=${REDIS_PASSWORD}
spring.redis.cluster.nodes=${REDIS_CLUSTER_NODES}
spring.redis.cluster.max-redirects=5
spring.data.redis.timeout=5000
# Lettuce Connection Pool 설정 (선택 사항, 기본값 사용 시 생략 가능)
spring.redis.lettuce.pool.max-active=8
spring.redis.lettuce.pool.max-idle=8
spring.redis.lettuce.pool.min-idle=0
spring.redis.lettuce.pool.max-wait=-1ms

jwt.secret=${JWT_SECRET}
ranking.key=projectRanking:products
event.key.prefix=product:event:
spring.ai.openai.api-key=${OPENAI_API_KEY}
spring.ai.openai.chat.options.model=gpt-4o-mini
google.gemini.api-key=${GEMINI_API_KEY}
google.gemini.api-url=${GEMINI_API_URL}

spring.kafka.bootstrap-servers=${KAFKA_HOST}
# Producer 설정
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# JobHistoryLog DTO를 JSON으로 보낼 것
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Consumer 설정
spring.kafka.consumer.group-id=job-log-group
# 처음부터 읽거나, 가장 나중부터 읽거나 (earliest/latest)
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# JSON으로 받은 메시지를 JobHistoryLog로 역직렬화
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Consumer JSON 역직렬화 설정 (매우 중요!)
# JSON 역직렬화기가 JobHistoryLog 클래스를 알도록 설정
spring.kafka.consumer.properties.spring.json.value.default.type=com.nklcbdty.api.log.dto.JobHistoryLog
spring.elasticsearch.uris=${ELASTIC_URI}
spring.elasticsearch.username=${ELASTIC_USERNAME}
spring.elasticsearch.password=${ELASTIC_PASSWORD}
